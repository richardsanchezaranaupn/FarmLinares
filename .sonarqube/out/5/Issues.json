{
  "$schema": "http://json.schemastore.org/sarif-1.0.0",
  "version": "1.0.0",
  "runs": [
    {
      "tool": {
        "name": "Compilador de Microsoft (R) Visual C#",
        "version": "4.9.0.0",
        "fileVersion": "4.9.0-3.24081.11 (98911739)",
        "semanticVersion": "4.9.0",
        "language": "es-MX"
      },
      "results": [
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 436,
                  "startColumn": 58,
                  "endLine": 436,
                  "endColumn": 62
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 357,
                  "startColumn": 61,
                  "endLine": 357,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 461,
                  "startColumn": 52,
                  "endLine": 461,
                  "endColumn": 56
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8600",
          "level": "warning",
          "message": "Se va a convertir un literal nulo o un posible valor nulo en un tipo que no acepta valores NULL",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 248,
                  "startColumn": 34,
                  "endLine": 248,
                  "endColumn": 38
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8601",
          "level": "warning",
          "message": "Posible asignaci√≥n de referencia nula.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 252,
                  "startColumn": 31,
                  "endLine": 252,
                  "endColumn": 42
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 401,
                  "startColumn": 31,
                  "endLine": 401,
                  "endColumn": 35
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 262,
                  "startColumn": 51,
                  "endLine": 262,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 101,
                  "startColumn": 62,
                  "endLine": 101,
                  "endColumn": 66
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 137,
                  "startColumn": 61,
                  "endLine": 137,
                  "endColumn": 65
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "CS8625",
          "level": "warning",
          "message": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 187,
                  "startColumn": 51,
                  "endLine": 187,
                  "endColumn": 55
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1
          }
        },
        {
          "ruleId": "NUnit2003",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 350,
                  "startColumn": 13,
                  "endLine": 350,
                  "endColumn": 100
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsTrue"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 363,
                  "startColumn": 13,
                  "endLine": 363,
                  "endColumn": 82
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 442,
                  "startColumn": 13,
                  "endLine": 442,
                  "endColumn": 79
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2003",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 256,
                  "startColumn": 13,
                  "endLine": 256,
                  "endColumn": 114
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsTrue"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 235,
                  "startColumn": 13,
                  "endLine": 235,
                  "endColumn": 105
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 391,
                  "startColumn": 13,
                  "endLine": 391,
                  "endColumn": 123
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 238,
                  "startColumn": 13,
                  "endLine": 238,
                  "endColumn": 133
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 333,
                  "startColumn": 13,
                  "endLine": 333,
                  "endColumn": 82
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2027",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.GreaterThan(expected)), instead of the classic model, Assert.Greater(actual, expected)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 241,
                  "startColumn": 13,
                  "endLine": 241,
                  "endColumn": 115
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "Greater"
            }
          }
        },
        {
          "ruleId": "NUnit2003",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 375,
                  "startColumn": 13,
                  "endLine": 375,
                  "endColumn": 63
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsTrue"
            }
          }
        },
        {
          "ruleId": "NUnit2003",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 408,
                  "startColumn": 13,
                  "endLine": 408,
                  "endColumn": 103
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsTrue"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 467,
                  "startColumn": 13,
                  "endLine": 467,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 492,
                  "startColumn": 13,
                  "endLine": 492,
                  "endColumn": 76
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 455,
                  "startColumn": 13,
                  "endLine": 455,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 268,
                  "startColumn": 13,
                  "endLine": 268,
                  "endColumn": 78
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 480,
                  "startColumn": 13,
                  "endLine": 480,
                  "endColumn": 68
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 214,
                  "startColumn": 13,
                  "endLine": 214,
                  "endColumn": 105
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 217,
                  "startColumn": 13,
                  "endLine": 217,
                  "endColumn": 133
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2030",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.LessThanOrEqualTo(expected)), instead of the classic model, Assert.LessOrEqual(actual, expected)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 220,
                  "startColumn": 13,
                  "endLine": 220,
                  "endColumn": 122
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "LessOrEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 33,
                  "startColumn": 13,
                  "endLine": 33,
                  "endColumn": 82
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 36,
                  "startColumn": 13,
                  "endLine": 36,
                  "endColumn": 96
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2003",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 39,
                  "startColumn": 13,
                  "endLine": 39,
                  "endColumn": 89
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsTrue"
            }
          }
        },
        {
          "ruleId": "NUnit2003",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 42,
                  "startColumn": 13,
                  "endLine": 42,
                  "endColumn": 109
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsTrue"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 295,
                  "startColumn": 13,
                  "endLine": 295,
                  "endColumn": 77
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 280,
                  "startColumn": 13,
                  "endLine": 280,
                  "endColumn": 98
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 509,
                  "startColumn": 13,
                  "endLine": 509,
                  "endColumn": 119
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 107,
                  "startColumn": 13,
                  "endLine": 107,
                  "endColumn": 78
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 131,
                  "startColumn": 13,
                  "endLine": 131,
                  "endColumn": 89
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 91,
                  "startColumn": 13,
                  "endLine": 91,
                  "endColumn": 109
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2030",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.LessThanOrEqualTo(expected)), instead of the classic model, Assert.LessOrEqual(actual, expected)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 94,
                  "startColumn": 13,
                  "endLine": 95,
                  "endColumn": 47
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "LessOrEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 425,
                  "startColumn": 13,
                  "endLine": 425,
                  "endColumn": 81
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 521,
                  "startColumn": 13,
                  "endLine": 521,
                  "endColumn": 86
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 310,
                  "startColumn": 13,
                  "endLine": 310,
                  "endColumn": 119
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 119,
                  "startColumn": 13,
                  "endLine": 119,
                  "endColumn": 76
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 538,
                  "startColumn": 13,
                  "endLine": 538,
                  "endColumn": 75
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 143,
                  "startColumn": 13,
                  "endLine": 143,
                  "endColumn": 80
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 555,
                  "startColumn": 13,
                  "endLine": 555,
                  "endColumn": 85
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 572,
                  "startColumn": 13,
                  "endLine": 572,
                  "endColumn": 72
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 162,
                  "startColumn": 13,
                  "endLine": 162,
                  "endColumn": 97
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2038",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 67,
                  "startColumn": 13,
                  "endLine": 67,
                  "endColumn": 82
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "True",
              "ModelName": "IsInstanceOf"
            }
          }
        },
        {
          "ruleId": "NUnit2005",
          "level": "warning",
          "message": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 70,
                  "startColumn": 13,
                  "endLine": 70,
                  "endColumn": 96
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "AreEqual"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 73,
                  "startColumn": 13,
                  "endLine": 73,
                  "endColumn": 96
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 76,
                  "startColumn": 13,
                  "endLine": 76,
                  "endColumn": 97
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 181,
                  "startColumn": 13,
                  "endLine": 181,
                  "endColumn": 98
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        },
        {
          "ruleId": "NUnit2002",
          "level": "note",
          "message": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr)",
          "locations": [
            {
              "resultFile": {
                "uri": "file:///C:/CALIDAD%20Y%20PRUEBAS/SISTEMA%20CORREGIDO/DeveloperJuniors/PruebasUnitarias/UnitTest1.cs",
                "region": {
                  "startLine": 193,
                  "startColumn": 13,
                  "endLine": 193,
                  "endColumn": 83
                }
              }
            }
          ],
          "properties": {
            "warningLevel": 1,
            "customProperties": {
              "HasToleranceValue": "False",
              "IsGenericMethod": "False",
              "ModelName": "IsFalse"
            }
          }
        }
      ],
      "rules": {
        "CS8600": {
          "id": "CS8600",
          "shortDescription": "Se va a convertir un literal nulo o un posible valor nulo en un tipo que no acepta valores NULL",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8600)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8601": {
          "id": "CS8601",
          "shortDescription": "Posible asignaci√≥n de referencia nula",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8601)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "CS8625": {
          "id": "CS8625",
          "shortDescription": "No se puede convertir un literal NULL en un tipo de referencia que no acepta valores NULL.",
          "defaultLevel": "warning",
          "helpUri": "https://msdn.microsoft.com/query/roslyn.query?appId=roslyn&k=k(CS8625)",
          "properties": {
            "category": "Compiler",
            "isEnabledByDefault": true,
            "tags": [
              "Compiler",
              "Telemetry"
            ]
          }
        },
        "NUnit2002": {
          "id": "NUnit2002",
          "shortDescription": "Consider using Assert.That(expr, Is.False) instead of Assert.IsFalse(expr)",
          "fullDescription": "Consider using the constraint model, Assert.That(expr, Is.False), instead of the classic model, Assert.IsFalse(expr).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2002.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2003": {
          "id": "NUnit2003",
          "shortDescription": "Consider using Assert.That(expr, Is.True) instead of Assert.IsTrue(expr)",
          "fullDescription": "Consider using the constraint model, Assert.That(expr, Is.True), instead of the classic model, Assert.IsTrue(expr).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2003.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2005": {
          "id": "NUnit2005",
          "shortDescription": "Consider using Assert.That(actual, Is.EqualTo(expected)) instead of Assert.AreEqual(expected, actual)",
          "fullDescription": "Consider using the constraint model, Assert.That(actual, Is.EqualTo(expected)), instead of the classic model, Assert.AreEqual(expected, actual).",
          "defaultLevel": "warning",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2005.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2027": {
          "id": "NUnit2027",
          "shortDescription": "Consider using Assert.That(actual, Is.GreaterThan(expected)) instead of Assert.Greater(actual, expected)",
          "fullDescription": "Consider using the constraint model, Assert.That(actual, Is.GreaterThan(expected)), instead of the classic model, Assert.Greater(actual, expected).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2027.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2030": {
          "id": "NUnit2030",
          "shortDescription": "Consider using Assert.That(actual, Is.LessThanOrEqualTo(expected)) instead of Assert.LessOrEqual(actual, expected)",
          "fullDescription": "Consider using the constraint model, Assert.That(actual, Is.LessThanOrEqualTo(expected)), instead of the classic model, Assert.LessOrEqual(actual, expected).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2030.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        },
        "NUnit2038": {
          "id": "NUnit2038",
          "shortDescription": "Consider using Assert.That(actual, Is.InstanceOf(expected)) instead of Assert.IsInstanceOf(expected, actual)",
          "fullDescription": "Consider using the constraint model, Assert.That(actual, Is.InstanceOf(expected)), instead of the classic model, Assert.IsInstanceOf(expected, actual).",
          "defaultLevel": "note",
          "helpUri": "https://github.com/nunit/nunit.analyzers/tree/master/documentation/NUnit2038.md",
          "properties": {
            "category": "Assertion",
            "isEnabledByDefault": true
          }
        }
      }
    }
  ]
}